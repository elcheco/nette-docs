Finder: vyhledávání souborů
***************************

.[perex]
Potřebujete najít soubory vyhovující určité masce? Finder vám to maximálně usnadní. Jde o neobyčejně všestranný a rychlý nástroj pro procházení adresářovou strukturou.

Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Finder;
```


Použití
-------

Nejprve si ukážeme, jak můžete pomocí [api:Nette\Utils\Finder] vypsat názvy souborů s příponami `.txt` a `.md` v aktuálním adresáři:

```php
foreach (Finder::findFiles(['*.txt', '*.md']) as $file) {
	echo $file;
}
```

Proměnná `$file` je instancí třídy [Nette\Utils\FileInfo |api:], což je rozšíření [SplFileInfo |php:SplFileInfo] o několik [užitečných metod |#FileInfo].

Výchozí adresář pro hledání je aktuální adresář, ale můžete ho změnit pomocí metod [in() nebo from()|#kde hledá].


Co hledat?
----------

Kromě findFiles() existuje i findDirectories(), které hledá jen adresáře, a find(), které hledá obojí. Tyto metody jsou statické, takže je lze volat bez vytvoření instance. Parameter s maskou je volitelný, pokud ho neuvedete, vyhledá se vše.

```php
foreach (Finder::find() as $file) {
	echo $file; // nyní se vypíší všechny soubory i adresáře
}
```

Pomocí metod `files()` a `directories()` můžete doplňovat co dalšího se má vyhledat (metody lze volat opakovaně a jako parametr lze uvést i pole masek):

```php
Finder::findDirectories() // všechny adresáře
	->files('*.php');     // plus všechny PHP soubory
}
```

Alternativou statických metod je vytvoření instance pomocí `new Finder` (takto vytvořený objekt nevyhledává nic) a opět doplnění co hledat pomocí `files()` a `directories()`:

```php
(new Finder)->directories() // všechny adresáře
	->files('*.php');     // plus všechny PHP soubory
}
```

V masce můžete používat [zástupné znaky|#Zástupné znaky] `*`, `**`, `?` a `[...]`. Dokonce můžete specifikovat i v adresáře, například `src/*.php` vyhledá všechny PHP soubory v adresáři `src`.


Kde hledat?
-----------

Výchozí adresář pro hledání je aktuální adresář, což můžete ho změnit pomocí metod `in()` a `from()`. Jak je z názvů metod  zřejmé, `in()` hledá pouze v daném adresáři, zatímco `from()` hledá i v jeho podadresářích (rekurzivně).

V případě, že chcete vyhledávat rekurzivně v aktuálním adresáři, můžete použít `from('.')`.

Obě metody lze volat vícekrát nebo jim předat více cest, soubory se pak budou hledat ve všech adresářích:

```php
Finder::findFiles('*.php')
	->in(['src', 'tests']) // hledá jen v src/ a tests/
	->from('vendor'); // hledá i v podadresářích vendor/
```

Relativní cesty jsou relativní k aktuálnímu adresáři. Můžete samozřejme uvést i absolutní cesty:

```php
Finder::findFiles('*.php')
	->in('/var/www/html');
```

Pokud některý z adresářů neexistuje, vyhodí se výjimka `Nette\UnexpectedValueException`.

V cestě je možné použít zástupné znaky [zástupné znaky|#Zástupné znaky] `*`, `**`, `?`. Můžete tak třeba pomocí cesty `src/*/*.php` hledat všechny PHP soubory v adresářích druhé úrovně v adresáři `src`. Naopak znaky `[...]` v cestě  podporovány nejsou, aby nedocházelo k nežádoucímu chování v případě, že bude hledat třeba v `->in(__DIR__)` a náhodou v cestě budou znaky `[]`. použijete např. .


Při vyhledávání do hloubky můžete nastavit maximální hloubku procházení pomocí metody `limitDepth()`. Pokud nastavíte např. `limitDepth(1)`, prochází se pouze první podadresáře, `limitDepth(0)` vypne procházení do hloubky a hodnota -1 ruší limit. Pokud hledáte zároveň soubory i adresáře, nejprve se vrací adresář a teprve poté soubory v něm obsažené, což lze změnit pomocí `childFirst()`.


Zástupné znaky
--------------

Maska může obsahovat známé zástupné znaky:
- `*` - libovolný počet libovolných znaků
- `**` - libovolný počet libovolných znaků včetně oddělovače adresářů `/` (tzv. globstar)
- ? - jeden libovolný znak
- [a-z] - libovolný znak z rozsahu
- [!a-z] - libovolný znak mimo rozsah

Znak `**` je mocným trumfem, protože umožňuje hledat i v podadresářích:

```php
Finder::findFiles('*.php')
	->from('src/**/tests');
```

Najde soubory v adresáři `src/tests`, ale i `src/foo/tests` nebo `src/foo/bar/tests` a tak dále.

V masce můžete používat i rozsahy `[...]` nebo negativní rozsahy `[!...]` známé z regulárních výrazů. Příklad hledání souborů `*.txt` obsahujících číslici v názvu:

```php
Finder::findFiles('*[0-9]*.txt');
```


Vyloučení
---------

Pomocí metody `exclude()` lze vyloučít soubory a adresáře z vyhledávání. Uvedete masku, kterým soubor nesmí vyhovovat. Příklad hledání souborů `*.txt` kromě těch, co obsahují v názvu písmeno `X`:

```php
Finder::findFiles('*.txt')
	->exclude('*X*');
```

Vynechání procházených podadresářů použijte `exclude()`:

```php
Finder::findFiles('*.php')
	->from($dir)
	->exclude('temp', '.git')
```


Filtrování
----------

Finder nabízí několik funkcí pro filtrování výsledků. Všechny jsou volitelné a lze je kombinovat.

Filtrování podle velikosti souboru. Takto najdeme soubory s velikostí v rozmezí 100 až 200 bytů:

```php
Finder::findFiles('*.php')
	->size('>=', 100)
	->size('<=', 200);
```

Filtrování podle data poslední změny. Tohle je hledání souborů změněných v posledních dvou týdnech:

```php
Finder::findFiles('*.php')
	->date('>', '- 2 weeks')
	->from($dir)
```

Obě funkce rozumí operátorům `>`, `>=`, `<`, `<=`, `=`, `!=`, `<>`.

Finder umožňuje také filtrovat výsledky pomocí vlastních funkcí. Funkce dostane jako parametr objekt `Nette\Utils\FileInfo` a musí vrátit `true` nebo `false`. Pokud vrátí `true`, soubor se zahrne do výsledků, pokud `false`, soubor se vynechá.

Příklad: hledání souborů PHP s počtem řádků větším než 1000:

```php
$hasMoreThan100Lines = fn(Nette\Utils\FileInfo $file) => count(file($file->getPathname())) > 1000;

Finder::findFiles('*.php')
	->filter($hasMoreThan100Lines)
```


Řazení
------

Finder nabízí také několik funkcí pro řazení výsledků.

Metoda `sortByName()` seřadí výsldek podle názvy souborů. Řazení je tzv. naturální, tedy správně si poradí s čísly v názvech a vrací, např. `foo1.txt` před `foo10.txt`.

Finder umožňuje také řadit pomocí vlastní funkce. Ta dostane jako parametr dva objekty `Nette\Utils\FileInfo` a musí vrátit hodnotu `-1`, `0` nebo `1`. Pokud vrátí `-1`, první soubor bude před druhým, pokud `1`, druhý soubor bude před prvním, pokud `0`, soubory budou seřazeny podle názvu.


```php
$sortBySize = fn(Nette\Utils\FileInfo $a, Nette\Utils\FileInfo $b) => $a->getSize() <=> $b->getSize();
$finder->sortBy($sortBySize);
```


FileInfo
--------

FileInfo je objekt představující soubor nebo adresář ve výsledků hledání. Jde o rozšíření třídy [SplFileInfo |php:SplFileInfo], která poskytuje informace, jako je velikost souboru, datum poslední změny, jméno, cesta, atd.

Navic poskytuje metody pro vrácení relativní cesty, což je užitečné při procházení do hloubky:

```php
foreach (Finder::findFiles('*.jpg')->from('.') as $file) {
	$absoluteFilePath = $file->getRealPath();
	$relativeFilePath = $file->getRelativePathname();
}
```

Dále máte k dispozici metody pro přečtení a zápis obsahu souboru:

```php
foreach ($finder as $file) {
    $contents = $file->read();
    // ...
    $file->write($contents);
}
```

/--comment


Symfony Finder
--------------
Septat srovnani se Symfony finderem? Asi jo. Vznikly obě před 15 lety, dnes je Nette Finder napsaný výrazně jedndušení jako generátor


- new Finder naopak hledá vše
- symfony autoamticky filtruje CVS (přidat taky?) a taky zacinajici teckou
- v symfony hleda in() rekurzivně
- $finder->files()->name('*.php') je v entte jen  $finder->files('*.php') nebo Finder::findFiles('*.php')
- $finder->directories()->name('*.php') je v entte jen  $finder->directories('*.php') nebo Finder::findDirectories('*.php')
- new (Finder) je v nette Finder::find()
- files() a directories() není přepínaš, lze volat opakovaně a rozšířovat počet vrácených souborů

- podstatný rozdíl: nette umí **
- v location lze používat **
	- soubory ve složce 'cs' a jejich podslozkach
	- takže míst $finder->in('**/cs');
	- je potřeba psát $finder->files()->path('/(^|\/)cs\//')->in('.');

- v masce lze používat ** i podadresáře
	- soubory přímo ve složce cs kdekoliv
		- takže místo $finder->files('cs/*')->from('.')
		- je potreba psat $finder->files()->path('/(^|\/)cs\/[^\/]+$/')->in('.');

- totez plati pro vylucovaní, taj pokud chci vyloučit soubory ve složce cs a jejich podslozkach
	- takze místo $finder->files('*')->exclude('cs/*');
	- je potreba psat $finder->files()->notPath('/(^|\/)cs\/[^\/]+$/')->in('.');

	- $finder->files()->notPath('cs') vylouží vlastně '*cs*'
  	- takze místo $finder->files('*')->exclude('cs');
    - je potreba psat $finder->files()->notPath('/(^|\/)cs(\/|$)/')->in('.');
\--


/--comment
TODO:
- maska **/
- collect()
- nativní slash
- ignoreUnreadableDirs
- ->append()
- filter(), descentFilter()
todo: ->followLinks();
  TODO: funguje koncove / jako jen složky?

>contains('lorem ipsum');
notContains('dolor sit amet');


exclude()
---------
maska ktera vylucuje vracena jmena
je relativní pokud začíná ./
lze volat vicekrat
pokud predstavuej složku, pouzik mask/* pro vyloučení všech souborů v této složce
samotné 'mask' vyloučí jen soubor 'mask' (TODO)

- vendor - vyloučí složku vendor i vsechno v ni
- vendor/** - vyloučí vše ve složce vendor
- vendor/* - vyloučí vše přímo ve složce vendor, ale ne vendor/x/foo

// TODO: nemělo by vyloužit složky!

\--

